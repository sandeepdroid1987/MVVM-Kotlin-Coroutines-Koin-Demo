// Code generated by moshi-kotlin-codegen. Do not edit.
package com.android.teams.domain.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TeamJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Team>() {
  private val options: JsonReader.Options = JsonReader.Options.of("national", "name",
      "country_name")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "national")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Team").append(')') }

  override fun fromJson(reader: JsonReader): Team {
    var national: Boolean? = null
    var name: String? = null
    var country_name: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> national = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("national",
            "national", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> country_name = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("country_name", "country_name", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Team(
        national = national ?: throw Util.missingProperty("national", "national", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        country_name = country_name ?: throw Util.missingProperty("country_name", "country_name",
            reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: Team?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("national")
    booleanAdapter.toJson(writer, value.national)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("country_name")
    stringAdapter.toJson(writer, value.country_name)
    writer.endObject()
  }
}
